#ifdef	USE_HWSMAP_PCF
	#define SUNSHAFTS_DYNAMIC
#endif	//	USE_HWSMAP_PCF

#include "common.h"
#include "shadow.h"

#define RAY_PATH	2.0h

#define	JITTER_SUN_SHAFTS
#define	FILTER_LOW

#ifndef SUNSHAFTS_QUALITY
	#define RAY_SAMPLES int(1)
#else
	#if SUNSHAFTS_QUALITY==1
		#define RAY_SAMPLES int(5)
	#else
		#if SUNSHAFTS_QUALITY==2
			#define RAY_SAMPLES int(10)
		#else
			#if SUNSHAFTS_QUALITY==3
				#define RAY_SAMPLES int(15)
			#else
				#define RAY_SAMPLES int(20)
			#endif
		#endif
	#endif
#endif

uniform float4 c_sunshafts;		// x - exposure, y - density, z - sample size
float4 	main (float2 tc : TEXCOORD0, float4 tcJ : TEXCOORD1 ) : COLOR
{
#ifndef	SUNSHAFTS_QUALITY
	return half4(0,0,0,0);
#else	//	SUN_SHAFTS_QUALITY

	half3	P = get_xyz_position(tc);
#ifndef	JITTER_SUN_SHAFTS	
//	Variable ray length, variable step dencity
	half3	direction = P/RAY_SAMPLES;
#else	//	JITTER_SUN_SHAFTS
//	Variable ray length, variable step dencity, use jittering
	half4	J0 	= tex2D		(jitter0,tcJ);
	half	coeff = (RAY_SAMPLES - 2*J0.x)/(RAY_SAMPLES*RAY_SAMPLES);		
	half3	direction = P*coeff;
#endif	//	JITTER_SUN_SHAFTS

	half	depth = P.z;
	half	deltaDepth = direction.z;
	
	half4	current	= mul (m_shadow,float4(P,1));
	half4	delta 	= mul (m_shadow, float4(direction,0));

	half	res = 0;
	half	max_density = c_sunshafts.x*SS_VOL_MAX_INTENSITY;
	half	density = max_density/RAY_SAMPLES;

	if (depth<0.0001)
		res = max_density;

	#ifndef SUNSHAFTS_DYNAMIC
	for ( int i=0; i<RAY_SAMPLES; ++i )
	{
		if (is_not_sky(depth))
#ifndef	FILTER_LOW
				res += density*shadow(current, float4(P.xyz, 1.0), 1.0);
#else	//	FILTER_LOW
				res += density*sample_hw_pcf(current, float4(0,0,0,0));
#endif	//	FILTER_LOW
		depth -= deltaDepth;
		current -= delta;
	}

	return res*Ldynamic_color;
#endif	//	SUN_SHAFTS_QUALITY
}

